type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: opt vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type canister_status_response = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt blob;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type TokenMeta = 
 record {
<<<<<<< HEAD
   decimal: nat;
   name: text;
   owner: principal;
   symbol: text;
   totalSuply: nat;
=======
   _decimals: nat;
   _fee: nat;
   _initialSupply: nat;
   _logo: text;
   _name: text;
   _owner: principal;
   _symbol: text;
>>>>>>> d245ee6 (bug fixes)
 };
type Meta = 
 record {
   canister_id: principal;
   created_at: int;
   id: nat;
<<<<<<< HEAD
=======
   isController: bool;
>>>>>>> d245ee6 (bug fixes)
   token: TokenMeta;
 };
type Forge = 
 service {
<<<<<<< HEAD
   getCanisterStatus: (principal) -> (opt canister_status_response);
   getMyTokens: () -> (opt vec Meta) query;
   getTokenMeta: (principal) -> (opt Meta) query;
=======
   deployDIPToken: (text, text, nat, text, nat, nat, text) -> (opt Meta);
   deployERCToken: (text, text, text, nat, nat, nat, text) -> (opt Meta);
   getCanisterStatus: (principal) -> (opt canister_status_response);
   getMyTokens: () -> (opt vec Meta) query;
   getTokenMeta: (principal) -> (opt Meta) query;
   updateController: (principal, vec principal) -> (bool);
>>>>>>> d245ee6 (bug fixes)
 };
service : () -> Forge
